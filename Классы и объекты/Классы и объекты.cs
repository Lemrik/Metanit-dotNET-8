// Описанием объекта является класс, а объект представляет экземпляр этого класса.

// По сути класс представляет новый тип, который определяется пользователем.
// Класс определяется с помощью ключевого слова сlass:
/*
    class название_класса
    {
        содержимое класса
    }
 */


// ==== Поля и методы класса ====

// Класс определен в отдельном файлу Person.cs

// Класс может хранить некоторые данные. Для хранения данных в классе применяются поля.
// По сути поля класса - это переменные, определенные на уровне класса.

// Кроме того, класс может определять некоторое поведение или выполняемые действия.
// Для определения поведения в классе применяются методы.

// В отличие от переменных, определенных в методах, поля класса могут иметь модификаторы, которые указываются перед полем.
// Так, в данном случае, чтобы все поля были доступны вне класса Person поля определены с модификатором public.


// ==== Создание объекта класса ====


// После определения класса мы можем создавать его объекты.
// Для создания объекта применяются конструкторы.

// new конструктор_класса(параметры_конструктора);
// Сначала идет оператор new, который выделяет память для объекта, а после него идет вызов конструктора.

// Если в классе не определено ни одного конструктора (как в случае с нашим классом Person),
// то для этого класса автоматически создается пустой конструктор по умолчанию, который не принимает никаких параметров.

Person tom = new Person();  // создание объекта класса Person

// Получаем значение полей в переменные
string personName = tom.name;
int personAge = tom.age;
Console.WriteLine($"Имя: {personName}  Возраст {personAge}\n");   // Имя: Undefined  Возраст: 0

// устанавливаем новые значения полей
tom.name = "Tom";
tom.age = 37;

// обращаемся к методу Print
tom.Print();    // Имя: Tom  Возраст: 37

