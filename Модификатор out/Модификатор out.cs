Console.WriteLine("Выходные параметры. Модификатор out\n");
// ===== Выходные параметры. Модификатор out

// Параметры могут быть также выходными.
// Чтобы сделать параметр выходным, перед ним ставится модификатор out:

void Sum(int x, int y, out int result)
{
    result = x + y; // методы, использующие такие параметры, обязательно должны присваивать им определенное значение!!!
}

// Здесь результат возвращается не через оператор return,
// а через выходной параметр result

int number;

// Причем, как и в случае с ref ключевое слово out используется как при определении метода, так и при его вызове.
Sum(10, 15, out number);

Console.WriteLine($"Значение переменной Sum(10, 15, out number) = {number}\n");   // 25

// Прелесть использования подобных параметров состоит в том,
// что по сути мы можем вернуть из метода не одно значение,
// а несколько. Например:

void GetRectangleData(int width, int height, out int rectArea, out int rectPerimetr)
{
    rectArea = width * height;       // площадь прямоугольника - произведение ширины на высоту
    rectPerimetr = (width + height) * 2; // периметр прямоугольника - сумма длин всех сторон  
}

// При этом можно определять переменные, которые передаются out-параметрам в непосредственно при вызове метода.
GetRectangleData(10, 20, out int area, out int perimetr);
// При этом, если нам неизвестен тип значений, которые будут присвоены параметрам,
// то мы можем для их определения использовать оператор var
// GetRectangleData(10, 20, out var area, out var perimetr);

Console.WriteLine($"\nGetRectangleData(10, 20, out area, out perimetr);\n");
Console.WriteLine($"Площадь прямоугольника: {area}");       // 200
Console.WriteLine($"Периметр прямоугольника: {perimetr}\n");   // 60