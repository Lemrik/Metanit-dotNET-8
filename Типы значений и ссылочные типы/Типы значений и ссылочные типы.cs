/*
Типы значений (value types):

    Целочисленные типы(byte, sbyte, short, ushort, int, uint, long, ulong)
    Типы с плавающей запятой (float, double)
    Тип decimal
    Тип bool
    Тип char
    Перечисления enum
    Структуры (struct)

Ссылочные типы (reference types): 

    Тип object
    Тип string
    Классы (class)
    Интерфейсы(interface)
    Делегаты(delegate)
    
 */

/*
 * 
    В чем же между ними различия? Для этого надо понять организацию памяти в .NET. 
    Здесь память делится на два типа: стек и куча (heap). 

    Параметры и переменные метода, которые представляют типы значений, размещают свое значение в стеке.
    Стек представляет собой структуру данных, которая растет снизу вверх: каждый новый добавляемый элемент помещается поверх предыдущего. 
    Время жизни переменных таких типов ограничено их контекстом. Физически стек - это некоторая область памяти в адресном пространстве.

    Когда программа только запускается на выполнение, в конце блока памяти, зарезервированного для стека устанавливается указатель стека. 
    При помещении данных в стек указатель переустанавливается таким образом, что снова указывает на новое свободное место.
    При вызове каждого отдельного метода в стеке будет выделяться область памяти или фрейм стека, 
    где будут храниться значения его параметров и переменных.

 */


Calculate(5);

static void Calculate(int t)
{
    int x = 6;
    int y = 7;
    int z = y + t;
}

/*
 
    При вызове этого метода Calculate в его фрейм в стеке будут помещаться значения t, x, y и z. 
    Они определяются в контексте данного метода. Когда метод отработает, область памяти, 
    которая выделялась под стек, впоследствии может быть использована другими методами.

    Причем если параметр или переменная метода представляет тип значений, 
    то в стеке будет храниться непосредсвенное значение этого параметра или переменной. 
    Например, в данном случае переменные и параметр метода Calculate представляют значимый тип - тип int,
    поэтому в стеке будут храниться их числовые значения.

    Ссылочные типы хранятся в куче или хипе, которую можно представить как неупорядоченный набор разнородных объектов. 
    Физически это остальная часть памяти, которая доступна процессу.

    При создании объекта ссылочного типа в стеке помещается ссылка на адрес в куче (хипе). 
    Когда объект ссылочного типа перестает использоваться, в дело вступает автоматический сборщик мусора: 
    он видит, что на объект в хипе нету больше ссылок, условно удаляет этот объект и очищает память - фактически помечает,
    что данный сегмент памяти может быть использован для хранения других данных.
 
 
 */