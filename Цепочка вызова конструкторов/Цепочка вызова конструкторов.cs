
// ==== Цепочка вызова конструкторов ====

Person_1 tom = new();
Person_1 bob = new("Bob");
Person_1 sam = new("Sam", 25);

tom.Print();          // Имя: Неизвестно  Возраст: 18
bob.Print();          // Имя: Bob  Возраст: 18
sam.Print();          // Имя: Sam  Возраст: 25

// В предыдущих примерах определены три конструктора.
// Все три конструктора выполняют однотипные действия - устанавливают значения полей name и age.

// Но этих повторяющихся действий могло быть больше.

// И мы можем не дублировать функциональность конструкторов,
// а просто обращаться из одного конструктора к другому также через ключевое слово this,
// передавая нужные значения для параметров:

class Person
{
    public string name;
    public int age;
    public Person() : this("Неизвестно")    // первый конструктор
    { }
    public Person(string name) : this(name, 18) // второй конструктор
    { }
    public Person(string name, int age)     // третий конструктор
    {
        this.name = name;
        this.age = age;
    }
    public void Print() => Console.WriteLine($"Имя: {name}  Возраст: {age}");
}

// В данном случае первый конструктор вызывает второй, а второй конструктор вызывает третий.
// По количеству и типу параметров компилятор узнает, какой именно конструктор вызывается.

// фактически все конструкторы не определяют каких-то других действий,
// кроме как передают третьему конструктору некоторые значения.

// Поэтому в реальности в данном случае проще оставить один конструктор,
// определив для его параметров значения по умолчанию:

class Person_1
{
    public string name;
    public int age;
    public Person_1(string name = "Неизвестно", int age = 18)
    {
        this.name = name;
        this.age = age;
    }
    public void Print() => Console.WriteLine($"Имя: {name}  Возраст: {age}");
}

// И если при вызове конструктора мы не передаем значение для какого-то параметра,
// то применяется значение по умолчанию.


// ==== Первичные конструкторы ====

//Начиная с версии C# 12 в язык C# была добавлена поддержка первичных конструкторов (Primary constructors).
//Первичные конструкторы позволяют добавлять параметры к определению класса и использовать эти параметры внутри класса:

public class Person_2(string name, int age)
{
    public Person_2(string name) : this(name, 18) { }
    public void Print() => Console.WriteLine($"name: {name}, age: {age}");
}

// Здесь для класса Person определен первичный конструктор с двумя параметрами - name и age.
// Эти параметры применяются для используются в методе Print.

// За кадром для каждого параметра первичного конструктора в классе создается приватное поле,
// которое хранит значение параметра. Благодаря этому они могут использоваться в теле класса.

// Кроме первичных конструкторов класс может определять дополнительные конструкторы, как примере выше.
// Но эти дополнительные конструкторы должны вызывать первичный конструктор