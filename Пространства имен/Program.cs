/*
    Обычно определяемые классы и другие типы в .NET не существуют сами по себе, 
    а заключаются в специальные контейнеры - пространства имен. 
    Пространства имен позволяют организовать код программы в логические блоки, 
    поволяют объединить и отделить от остального кода некоторую функциональность, 
    которая связана некоторой общей идеей или которая выполняет определенную задачу.

    namespace имя_пространства_имен
    {
        // содержимое пространства имен
    }


 */

// определим в файле Program.cs пространство имен, которое будет называться Base

namespace Base
{
    class Person
    {
        string name;
        public Person(string name) => this.name = name;
        public void Print() => Console.WriteLine($"Имя: {name}");
    }
}

// Чтобы использовать класс Person вне области видимости его namespace
// необходимо использовать полное имя этого класса с учетом пространства имен

// Base.Person tom = new("Tom");
// tom.Print();

/*
    Поскольку класс Person располагается в пространстве имен Base,
    то его полное имя - Base.Person. Соответственно, 
    используя это имя, мы можем обращаться к данному классу вне его пространства имен.
 */

// ==== Подключение пространства имен ====

/*
    Однако полное имя класса с учетом пространства имен добавляет в код избыточность 
    - особенно, если пространство имен содержит множество классов, которые мы хотим использовать. 
    И чтобы не писать полное имя класса, мы можем просто подключить пространство имен с помощью директивы using:

    using Base; // подключение пространства имен Base
 
 */

// ==== Вложенные пространства имен ====

// Одни пространства имен могут содержать другие.
// Для обращения к таким классам вне пространства Base необходимо использовать всю цепочку пространств имен
// using Base.PersonTypes; // подключение пространства имен Base.PersonTypes для класса Person

// так же можно определять пространство имен и подключать его из другого фапйла, например классы