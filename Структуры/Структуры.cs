// Наряду с классами структуры представляют еще один способ создания собственных типов данных в C#.
// Более того многие примитивные типы, например, int, double и т.д., по сути являются структурами.

// Как и классы, структуры могут хранить состояние в виде полей (переменных) и определять поведение в виде методов.
/*
 
    struct Person
    {
        public string name;
        public int age;

        public void Print()
        {
            Console.WriteLine($"Имя: {name}  Возраст: {age}");
        }
    }

*/


// Создание объекта структуры

// как и в случае с классами, применяется вызов конструктура с оператором new.

Person tom = new Person();  // вызов конструктора
                            // или так 
                            // Person tom = new();

tom.name = "Tom";   // изменяем значение по умолчанию в поле name

tom.Print();    // Имя: Tom  Возраст: 0

struct Person
{
    public string name;
    public int age;

    // Как и класс, структура может определять конструкторы.
    public Person(string name = "Tom", int age = 1)
    {
        this.name = name;
        this.age = age;
    }

    public void Print()
    {
        Console.WriteLine($"Имя: {name}  Возраст: {age}");
    }
}

// Копирование структуры с помощью with
// Если нам необходимо скопировать в один объект структуры значения из другого с небольшими изменениями,
// то мы можем использовать оператор with:

// Person tom = new Person { name = "Tom", age = 22 };
// Person bob = tom with { name = "Bob" };

// В данном случае объект bob получает все значения объекта tom,
// а затем после оператора with в фигурных скобках указывается поля со значениями, которые мы хотим изменить.